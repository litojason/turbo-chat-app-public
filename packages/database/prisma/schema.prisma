// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "./../generated/prisma"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  about     String?
  token     String?
  isOnline  Boolean  @default(true)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  chats    UserChat[]
}

model Chat {
  id        String   @id @default(cuid())
  name      String
  chatType  ChatType @default(PRIVATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    UserChat[]
  messages Message[]
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  fromUser  User     @relation(fields: [fromUserId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromUserId String
  chatId     String
  userChats  UserChat[]
}

model UserChat {
  user      User      @relation(fields: [userId], references: [id])
  chat      Chat      @relation(fields: [chatId], references: [id])
  message   Message?  @relation(fields: [clientOffset], references: [id])
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId       String
  chatId       String
  clientOffset Int?

  @@id([userId, chatId])
}
